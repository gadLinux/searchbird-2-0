/**
 * Generated by Scrooge
 *   version: 3.18.1
 *   rev: 59eb954f8f1bf091a6ddd6e6fb21219aff8cbcc5
 *   built at: 20150430-150955
 */
package com.feynmanliang.searchbird.thrift

import com.twitter.scrooge.{
  TFieldBlob, ThriftService, ThriftStruct, ThriftStructCodec, ThriftStructCodec3, ThriftStructFieldInfo, ThriftUtil}
import java.nio.ByteBuffer
import java.util.Arrays
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TTransport
import org.apache.thrift.TApplicationException
import org.apache.thrift.transport.TMemoryBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.{
  Builder,
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}

import scala.language.higherKinds

/**
 * A simple memcache-like service, which stores strings by key/value.
 * You should replace this with your actual service.
 */
@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
trait SearchbirdService[+MM[_]] extends ThriftService {
  
  def get(key: String): MM[String]
  
  def put(key: String, value: String): MM[Unit]
  
  def search(query: String): MM[Seq[String]]
}

/**
 * A simple memcache-like service, which stores strings by key/value.
 * You should replace this with your actual service.
 */
object SearchbirdService {
  
  object get$args extends ThriftStructCodec3[get$args] {
    private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
    val Struct = new TStruct("get_args")
    val KeyField = new TField("key", TType.STRING, 1)
    val KeyFieldManifest = implicitly[Manifest[String]]
  
    /**
     * Field information in declaration order.
     */
    lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
      new ThriftStructFieldInfo(
        KeyField,
        false,
        false,
        KeyFieldManifest,
        None,
        None,
        immutable$Map(
        ),
        immutable$Map(
        )
      )
    )
  
    lazy val structAnnotations: immutable$Map[String, String] =
      immutable$Map[String, String](
      )
  
    /**
     * Checks that all required fields are non-null.
     */
    def validate(_item: get$args): Unit = {
    }
  
    def withoutPassthroughFields(original: get$args): get$args =
      new get$args(
        key =
          {
            val field = original.key
            field
          }
      )
  
    override def encode(_item: get$args, _oproto: TProtocol): Unit = {
      _item.write(_oproto)
    }
  
    override def decode(_iprot: TProtocol): get$args = {
      var key: String = null
      var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
      var _done = false
  
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 =>
              _field.`type` match {
                case TType.STRING =>
                  key = readKeyValue(_iprot)
                case _actualType =>
                  val _expectedType = TType.STRING
                  throw new TProtocolException(
                    "Received wrong type for field 'key' (expected=%s, actual=%s).".format(
                      ttypeToString(_expectedType),
                      ttypeToString(_actualType)
                    )
                  )
              }
            case _ =>
              if (_passthroughFields == null)
                _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
              _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
  
      new get$args(
        key,
        if (_passthroughFields == null)
          NoPassthroughFields
        else
          _passthroughFields.result()
      )
    }
  
    def apply(
      key: String
    ): get$args =
      new get$args(
        key
      )
  
    def unapply(_item: get$args): Option[String] = Some(_item.key)
  
  
    private def readKeyValue(_iprot: TProtocol): String = {
      _iprot.readString()
    }
  
    private def writeKeyField(key_item: String, _oprot: TProtocol): Unit = {
      _oprot.writeFieldBegin(KeyField)
      writeKeyValue(key_item, _oprot)
      _oprot.writeFieldEnd()
    }
  
    private def writeKeyValue(key_item: String, _oprot: TProtocol): Unit = {
      _oprot.writeString(key_item)
    }
  
  
  }
  
  class get$args(
      val key: String,
      val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends ThriftStruct
    with scala.Product1[String]
    with java.io.Serializable
  {
    import get$args._
      def this(
        key: String
      ) = this(
        key,
        Map.empty
      )
  
    def _1 = key
  
  
    override def write(_oprot: TProtocol): Unit = {
      get$args.validate(this)
      _oprot.writeStructBegin(Struct)
      if (key ne null) writeKeyField(key, _oprot)
      _passthroughFields.values.foreach { _.write(_oprot) }
      _oprot.writeFieldStop()
      _oprot.writeStructEnd()
    }
  
    def copy(
      key: String = this.key,
      _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
    ): get$args =
      new get$args(
        key,
        _passthroughFields
      )
  
    override def canEqual(other: Any): Boolean = other.isInstanceOf[get$args]
  
    override def equals(other: Any): Boolean =
      _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
        _passthroughFields == other.asInstanceOf[get$args]._passthroughFields
  
    override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
  
    override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
  
  
    override def productArity: Int = 1
  
    override def productElement(n: Int): Any = n match {
      case 0 => this.key
      case _ => throw new IndexOutOfBoundsException(n.toString)
    }
  
    override def productPrefix: String = "get$args"
  }
  
  object get$result extends ThriftStructCodec3[get$result] {
    private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
    val Struct = new TStruct("get_result")
    val SuccessField = new TField("success", TType.STRING, 0)
    val SuccessFieldManifest = implicitly[Manifest[String]]
    val ExField = new TField("ex", TType.STRUCT, 1)
    val ExFieldManifest = implicitly[Manifest[SearchbirdException]]
  
    /**
     * Field information in declaration order.
     */
    lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
      new ThriftStructFieldInfo(
        SuccessField,
        true,
        false,
        SuccessFieldManifest,
        None,
        None,
        immutable$Map(
        ),
        immutable$Map(
        )
      ),
      new ThriftStructFieldInfo(
        ExField,
        true,
        false,
        ExFieldManifest,
        None,
        None,
        immutable$Map(
        ),
        immutable$Map(
        )
      )
    )
  
    lazy val structAnnotations: immutable$Map[String, String] =
      immutable$Map[String, String](
      )
  
    /**
     * Checks that all required fields are non-null.
     */
    def validate(_item: get$result): Unit = {
    }
  
    def withoutPassthroughFields(original: get$result): get$result =
      new get$result(
        success =
          {
            val field = original.success
            field.map { field =>
              field
            }
          },
        ex =
          {
            val field = original.ex
            field.map { field =>
              SearchbirdException.withoutPassthroughFields(field)
            }
          }
      )
  
    override def encode(_item: get$result, _oproto: TProtocol): Unit = {
      _item.write(_oproto)
    }
  
    override def decode(_iprot: TProtocol): get$result = {
      var success: Option[String] = None
      var ex: Option[SearchbirdException] = None
      var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
      var _done = false
  
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 0 =>
              _field.`type` match {
                case TType.STRING =>
                  success = Some(readSuccessValue(_iprot))
                case _actualType =>
                  val _expectedType = TType.STRING
                  throw new TProtocolException(
                    "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                      ttypeToString(_expectedType),
                      ttypeToString(_actualType)
                    )
                  )
              }
            case 1 =>
              _field.`type` match {
                case TType.STRUCT =>
                  ex = Some(readExValue(_iprot))
                case _actualType =>
                  val _expectedType = TType.STRUCT
                  throw new TProtocolException(
                    "Received wrong type for field 'ex' (expected=%s, actual=%s).".format(
                      ttypeToString(_expectedType),
                      ttypeToString(_actualType)
                    )
                  )
              }
            case _ =>
              if (_passthroughFields == null)
                _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
              _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
  
      new get$result(
        success,
        ex,
        if (_passthroughFields == null)
          NoPassthroughFields
        else
          _passthroughFields.result()
      )
    }
  
    def apply(
      success: Option[String] = None,
      ex: Option[SearchbirdException] = None
    ): get$result =
      new get$result(
        success,
        ex
      )
  
    def unapply(_item: get$result): Option[scala.Product2[Option[String], Option[SearchbirdException]]] = Some(_item)
  
  
    private def readSuccessValue(_iprot: TProtocol): String = {
      _iprot.readString()
    }
  
    private def writeSuccessField(success_item: String, _oprot: TProtocol): Unit = {
      _oprot.writeFieldBegin(SuccessField)
      writeSuccessValue(success_item, _oprot)
      _oprot.writeFieldEnd()
    }
  
    private def writeSuccessValue(success_item: String, _oprot: TProtocol): Unit = {
      _oprot.writeString(success_item)
    }
  
    private def readExValue(_iprot: TProtocol): SearchbirdException = {
      SearchbirdException.decode(_iprot)
    }
  
    private def writeExField(ex_item: SearchbirdException, _oprot: TProtocol): Unit = {
      _oprot.writeFieldBegin(ExField)
      writeExValue(ex_item, _oprot)
      _oprot.writeFieldEnd()
    }
  
    private def writeExValue(ex_item: SearchbirdException, _oprot: TProtocol): Unit = {
      ex_item.write(_oprot)
    }
  
  
  }
  
  class get$result(
      val success: Option[String],
      val ex: Option[SearchbirdException],
      val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends ThriftStruct
    with scala.Product2[Option[String], Option[SearchbirdException]]
    with java.io.Serializable
  {
    import get$result._
      def this(
        success: Option[String] = None,
        ex: Option[SearchbirdException] = None
      ) = this(
        success,
        ex,
        Map.empty
      )
  
    def _1 = success
    def _2 = ex
  
  
    override def write(_oprot: TProtocol): Unit = {
      get$result.validate(this)
      _oprot.writeStructBegin(Struct)
      if (success.isDefined) writeSuccessField(success.get, _oprot)
      if (ex.isDefined) writeExField(ex.get, _oprot)
      _passthroughFields.values.foreach { _.write(_oprot) }
      _oprot.writeFieldStop()
      _oprot.writeStructEnd()
    }
  
    def copy(
      success: Option[String] = this.success,
      ex: Option[SearchbirdException] = this.ex,
      _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
    ): get$result =
      new get$result(
        success,
        ex,
        _passthroughFields
      )
  
    override def canEqual(other: Any): Boolean = other.isInstanceOf[get$result]
  
    override def equals(other: Any): Boolean =
      _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
        _passthroughFields == other.asInstanceOf[get$result]._passthroughFields
  
    override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
  
    override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
  
  
    override def productArity: Int = 2
  
    override def productElement(n: Int): Any = n match {
      case 0 => this.success
      case 1 => this.ex
      case _ => throw new IndexOutOfBoundsException(n.toString)
    }
  
    override def productPrefix: String = "get$result"
  }
  
  object put$args extends ThriftStructCodec3[put$args] {
    private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
    val Struct = new TStruct("put_args")
    val KeyField = new TField("key", TType.STRING, 1)
    val KeyFieldManifest = implicitly[Manifest[String]]
    val ValueField = new TField("value", TType.STRING, 2)
    val ValueFieldManifest = implicitly[Manifest[String]]
  
    /**
     * Field information in declaration order.
     */
    lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
      new ThriftStructFieldInfo(
        KeyField,
        false,
        false,
        KeyFieldManifest,
        None,
        None,
        immutable$Map(
        ),
        immutable$Map(
        )
      ),
      new ThriftStructFieldInfo(
        ValueField,
        false,
        false,
        ValueFieldManifest,
        None,
        None,
        immutable$Map(
        ),
        immutable$Map(
        )
      )
    )
  
    lazy val structAnnotations: immutable$Map[String, String] =
      immutable$Map[String, String](
      )
  
    /**
     * Checks that all required fields are non-null.
     */
    def validate(_item: put$args): Unit = {
    }
  
    def withoutPassthroughFields(original: put$args): put$args =
      new put$args(
        key =
          {
            val field = original.key
            field
          },
        value =
          {
            val field = original.value
            field
          }
      )
  
    override def encode(_item: put$args, _oproto: TProtocol): Unit = {
      _item.write(_oproto)
    }
  
    override def decode(_iprot: TProtocol): put$args = {
      var key: String = null
      var value: String = null
      var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
      var _done = false
  
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 =>
              _field.`type` match {
                case TType.STRING =>
                  key = readKeyValue(_iprot)
                case _actualType =>
                  val _expectedType = TType.STRING
                  throw new TProtocolException(
                    "Received wrong type for field 'key' (expected=%s, actual=%s).".format(
                      ttypeToString(_expectedType),
                      ttypeToString(_actualType)
                    )
                  )
              }
            case 2 =>
              _field.`type` match {
                case TType.STRING =>
                  value = readValueValue(_iprot)
                case _actualType =>
                  val _expectedType = TType.STRING
                  throw new TProtocolException(
                    "Received wrong type for field 'value' (expected=%s, actual=%s).".format(
                      ttypeToString(_expectedType),
                      ttypeToString(_actualType)
                    )
                  )
              }
            case _ =>
              if (_passthroughFields == null)
                _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
              _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
  
      new put$args(
        key,
        value,
        if (_passthroughFields == null)
          NoPassthroughFields
        else
          _passthroughFields.result()
      )
    }
  
    def apply(
      key: String,
      value: String
    ): put$args =
      new put$args(
        key,
        value
      )
  
    def unapply(_item: put$args): Option[scala.Product2[String, String]] = Some(_item)
  
  
    private def readKeyValue(_iprot: TProtocol): String = {
      _iprot.readString()
    }
  
    private def writeKeyField(key_item: String, _oprot: TProtocol): Unit = {
      _oprot.writeFieldBegin(KeyField)
      writeKeyValue(key_item, _oprot)
      _oprot.writeFieldEnd()
    }
  
    private def writeKeyValue(key_item: String, _oprot: TProtocol): Unit = {
      _oprot.writeString(key_item)
    }
  
    private def readValueValue(_iprot: TProtocol): String = {
      _iprot.readString()
    }
  
    private def writeValueField(value_item: String, _oprot: TProtocol): Unit = {
      _oprot.writeFieldBegin(ValueField)
      writeValueValue(value_item, _oprot)
      _oprot.writeFieldEnd()
    }
  
    private def writeValueValue(value_item: String, _oprot: TProtocol): Unit = {
      _oprot.writeString(value_item)
    }
  
  
  }
  
  class put$args(
      val key: String,
      val value: String,
      val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends ThriftStruct
    with scala.Product2[String, String]
    with java.io.Serializable
  {
    import put$args._
      def this(
        key: String,
        value: String
      ) = this(
        key,
        value,
        Map.empty
      )
  
    def _1 = key
    def _2 = value
  
  
    override def write(_oprot: TProtocol): Unit = {
      put$args.validate(this)
      _oprot.writeStructBegin(Struct)
      if (key ne null) writeKeyField(key, _oprot)
      if (value ne null) writeValueField(value, _oprot)
      _passthroughFields.values.foreach { _.write(_oprot) }
      _oprot.writeFieldStop()
      _oprot.writeStructEnd()
    }
  
    def copy(
      key: String = this.key,
      value: String = this.value,
      _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
    ): put$args =
      new put$args(
        key,
        value,
        _passthroughFields
      )
  
    override def canEqual(other: Any): Boolean = other.isInstanceOf[put$args]
  
    override def equals(other: Any): Boolean =
      _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
        _passthroughFields == other.asInstanceOf[put$args]._passthroughFields
  
    override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
  
    override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
  
  
    override def productArity: Int = 2
  
    override def productElement(n: Int): Any = n match {
      case 0 => this.key
      case 1 => this.value
      case _ => throw new IndexOutOfBoundsException(n.toString)
    }
  
    override def productPrefix: String = "put$args"
  }
  
  object put$result extends ThriftStructCodec3[put$result] {
    private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
    val Struct = new TStruct("put_result")
  
    /**
     * Field information in declaration order.
     */
    lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    )
  
    lazy val structAnnotations: immutable$Map[String, String] =
      immutable$Map[String, String](
      )
  
    /**
     * Checks that all required fields are non-null.
     */
    def validate(_item: put$result): Unit = {
    }
  
    def withoutPassthroughFields(original: put$result): put$result =
      new put$result(
      )
  
    override def encode(_item: put$result, _oproto: TProtocol): Unit = {
      _item.write(_oproto)
    }
  
    override def decode(_iprot: TProtocol): put$result = {
      var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
      var _done = false
  
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case _ =>
              if (_passthroughFields == null)
                _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
              _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
  
      new put$result(
        if (_passthroughFields == null)
          NoPassthroughFields
        else
          _passthroughFields.result()
      )
    }
  
    def apply(
    ): put$result =
      new put$result(
      )
  
    def unapply(_item: put$result): Boolean = true
  
  
  
  }
  
  class put$result(
      val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends ThriftStruct
    with scala.Product
    with java.io.Serializable
  {
    import put$result._
      def this(
      ) = this(
        Map.empty
      )
  
  
  
    override def write(_oprot: TProtocol): Unit = {
      put$result.validate(this)
      _oprot.writeStructBegin(Struct)
      _passthroughFields.values.foreach { _.write(_oprot) }
      _oprot.writeFieldStop()
      _oprot.writeStructEnd()
    }
  
    def copy(
      _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
    ): put$result =
      new put$result(
        _passthroughFields
      )
  
    override def canEqual(other: Any): Boolean = other.isInstanceOf[put$result]
  
    override def equals(other: Any): Boolean =
      _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
        _passthroughFields == other.asInstanceOf[put$result]._passthroughFields
  
    override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
  
    override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
  
  
    override def productArity: Int = 0
  
    override def productElement(n: Int): Any = n match {
      case _ => throw new IndexOutOfBoundsException(n.toString)
    }
  
    override def productPrefix: String = "put$result"
  }
  
  object search$args extends ThriftStructCodec3[search$args] {
    private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
    val Struct = new TStruct("search_args")
    val QueryField = new TField("query", TType.STRING, 1)
    val QueryFieldManifest = implicitly[Manifest[String]]
  
    /**
     * Field information in declaration order.
     */
    lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
      new ThriftStructFieldInfo(
        QueryField,
        false,
        false,
        QueryFieldManifest,
        None,
        None,
        immutable$Map(
        ),
        immutable$Map(
        )
      )
    )
  
    lazy val structAnnotations: immutable$Map[String, String] =
      immutable$Map[String, String](
      )
  
    /**
     * Checks that all required fields are non-null.
     */
    def validate(_item: search$args): Unit = {
    }
  
    def withoutPassthroughFields(original: search$args): search$args =
      new search$args(
        query =
          {
            val field = original.query
            field
          }
      )
  
    override def encode(_item: search$args, _oproto: TProtocol): Unit = {
      _item.write(_oproto)
    }
  
    override def decode(_iprot: TProtocol): search$args = {
      var query: String = null
      var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
      var _done = false
  
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 =>
              _field.`type` match {
                case TType.STRING =>
                  query = readQueryValue(_iprot)
                case _actualType =>
                  val _expectedType = TType.STRING
                  throw new TProtocolException(
                    "Received wrong type for field 'query' (expected=%s, actual=%s).".format(
                      ttypeToString(_expectedType),
                      ttypeToString(_actualType)
                    )
                  )
              }
            case _ =>
              if (_passthroughFields == null)
                _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
              _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
  
      new search$args(
        query,
        if (_passthroughFields == null)
          NoPassthroughFields
        else
          _passthroughFields.result()
      )
    }
  
    def apply(
      query: String
    ): search$args =
      new search$args(
        query
      )
  
    def unapply(_item: search$args): Option[String] = Some(_item.query)
  
  
    private def readQueryValue(_iprot: TProtocol): String = {
      _iprot.readString()
    }
  
    private def writeQueryField(query_item: String, _oprot: TProtocol): Unit = {
      _oprot.writeFieldBegin(QueryField)
      writeQueryValue(query_item, _oprot)
      _oprot.writeFieldEnd()
    }
  
    private def writeQueryValue(query_item: String, _oprot: TProtocol): Unit = {
      _oprot.writeString(query_item)
    }
  
  
  }
  
  class search$args(
      val query: String,
      val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends ThriftStruct
    with scala.Product1[String]
    with java.io.Serializable
  {
    import search$args._
      def this(
        query: String
      ) = this(
        query,
        Map.empty
      )
  
    def _1 = query
  
  
    override def write(_oprot: TProtocol): Unit = {
      search$args.validate(this)
      _oprot.writeStructBegin(Struct)
      if (query ne null) writeQueryField(query, _oprot)
      _passthroughFields.values.foreach { _.write(_oprot) }
      _oprot.writeFieldStop()
      _oprot.writeStructEnd()
    }
  
    def copy(
      query: String = this.query,
      _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
    ): search$args =
      new search$args(
        query,
        _passthroughFields
      )
  
    override def canEqual(other: Any): Boolean = other.isInstanceOf[search$args]
  
    override def equals(other: Any): Boolean =
      _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
        _passthroughFields == other.asInstanceOf[search$args]._passthroughFields
  
    override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
  
    override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
  
  
    override def productArity: Int = 1
  
    override def productElement(n: Int): Any = n match {
      case 0 => this.query
      case _ => throw new IndexOutOfBoundsException(n.toString)
    }
  
    override def productPrefix: String = "search$args"
  }
  
  object search$result extends ThriftStructCodec3[search$result] {
    private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
    val Struct = new TStruct("search_result")
    val SuccessField = new TField("success", TType.LIST, 0)
    val SuccessFieldManifest = implicitly[Manifest[Seq[String]]]
  
    /**
     * Field information in declaration order.
     */
    lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
      new ThriftStructFieldInfo(
        SuccessField,
        true,
        false,
        SuccessFieldManifest,
        None,
        Some(implicitly[Manifest[String]]),
        immutable$Map(
        ),
        immutable$Map(
        )
      )
    )
  
    lazy val structAnnotations: immutable$Map[String, String] =
      immutable$Map[String, String](
      )
  
    /**
     * Checks that all required fields are non-null.
     */
    def validate(_item: search$result): Unit = {
    }
  
    def withoutPassthroughFields(original: search$result): search$result =
      new search$result(
        success =
          {
            val field = original.success
            field.map { field =>
              field.map { field =>
                field
              }
            }
          }
      )
  
    override def encode(_item: search$result, _oproto: TProtocol): Unit = {
      _item.write(_oproto)
    }
  
    override def decode(_iprot: TProtocol): search$result = {
      var success: Option[Seq[String]] = None
      var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
      var _done = false
  
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 0 =>
              _field.`type` match {
                case TType.LIST =>
                  success = Some(readSuccessValue(_iprot))
                case _actualType =>
                  val _expectedType = TType.LIST
                  throw new TProtocolException(
                    "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                      ttypeToString(_expectedType),
                      ttypeToString(_actualType)
                    )
                  )
              }
            case _ =>
              if (_passthroughFields == null)
                _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
              _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
  
      new search$result(
        success,
        if (_passthroughFields == null)
          NoPassthroughFields
        else
          _passthroughFields.result()
      )
    }
  
    def apply(
      success: Option[Seq[String]] = None
    ): search$result =
      new search$result(
        success
      )
  
    def unapply(_item: search$result): Option[Option[Seq[String]]] = Some(_item.success)
  
  
    private def readSuccessValue(_iprot: TProtocol): Seq[String] = {
      val _list = _iprot.readListBegin()
      if (_list.size == 0) {
        _iprot.readListEnd()
        Nil
      } else {
        val _rv = new mutable$ArrayBuffer[String](_list.size)
        var _i = 0
        while (_i < _list.size) {
          _rv += {
            _iprot.readString()
          }
          _i += 1
        }
        _iprot.readListEnd()
        _rv
      }
    }
  
    private def writeSuccessField(success_item: Seq[String], _oprot: TProtocol): Unit = {
      _oprot.writeFieldBegin(SuccessField)
      writeSuccessValue(success_item, _oprot)
      _oprot.writeFieldEnd()
    }
  
    private def writeSuccessValue(success_item: Seq[String], _oprot: TProtocol): Unit = {
      _oprot.writeListBegin(new TList(TType.STRING, success_item.size))
      success_item match {
        case _: IndexedSeq[_] =>
          var _i = 0
          val _size = success_item.size
          while (_i < _size) {
            val success_item_element = success_item(_i)
            _oprot.writeString(success_item_element)
            _i += 1
          }
        case _ =>
          success_item.foreach { success_item_element =>
            _oprot.writeString(success_item_element)
          }
      }
      _oprot.writeListEnd()
    }
  
  
  }
  
  class search$result(
      val success: Option[Seq[String]],
      val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends ThriftStruct
    with scala.Product1[Option[Seq[String]]]
    with java.io.Serializable
  {
    import search$result._
      def this(
        success: Option[Seq[String]] = None
      ) = this(
        success,
        Map.empty
      )
  
    def _1 = success
  
  
    override def write(_oprot: TProtocol): Unit = {
      search$result.validate(this)
      _oprot.writeStructBegin(Struct)
      if (success.isDefined) writeSuccessField(success.get, _oprot)
      _passthroughFields.values.foreach { _.write(_oprot) }
      _oprot.writeFieldStop()
      _oprot.writeStructEnd()
    }
  
    def copy(
      success: Option[Seq[String]] = this.success,
      _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
    ): search$result =
      new search$result(
        success,
        _passthroughFields
      )
  
    override def canEqual(other: Any): Boolean = other.isInstanceOf[search$result]
  
    override def equals(other: Any): Boolean =
      _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
        _passthroughFields == other.asInstanceOf[search$result]._passthroughFields
  
    override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
  
    override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
  
  
    override def productArity: Int = 1
  
    override def productElement(n: Int): Any = n match {
      case 0 => this.success
      case _ => throw new IndexOutOfBoundsException(n.toString)
    }
  
    override def productPrefix: String = "search$result"
  }

  import com.twitter.finagle.thrift.Protocols
  import com.twitter.util.Future

  trait FutureIface extends  SearchbirdService[Future] {
    
    def get(key: String): Future[String]
    
    def put(key: String, value: String): Future[Unit]
    
    def search(query: String): Future[Seq[String]]
  }

  class FinagledClient(
      service: com.twitter.finagle.Service[com.twitter.finagle.thrift.ThriftClientRequest, Array[Byte]],
      protocolFactory: TProtocolFactory = Protocols.binaryFactory(),
      serviceName: String = "SearchbirdService",
      stats: com.twitter.finagle.stats.StatsReceiver = com.twitter.finagle.stats.NullStatsReceiver)
    extends SearchbirdService$FinagleClient(
      service,
      protocolFactory,
      serviceName,
      stats)
    with FutureIface

  class FinagledService(
      iface: FutureIface,
      protocolFactory: TProtocolFactory)
    extends SearchbirdService$FinagleService(
      iface,
      protocolFactory)
}